<% 7.times do |count| %>
  <li>  
    <div class="calendar-column">
      <p class="day"><%= @times_for_week[count][:date].strftime('%A') %></p>
      <p class="date"><%= @times_for_week[count][:date].strftime('%m/%d') %></p>
      <% if @times_for_week[count][:times] %>
        <% @times_for_week[count][:times].each do |data| %>
          <div class="appt-time-box">
            <label>
              <input type="checkbox" id="<%=data[:uniq_id]%>" class="appt-time-checkbox <%=data[:reserved]%>" value="<%=data[:datetime].to_s+'----'+data[:slot_id].to_s%>" name="appt_selection[<%= data[:uniq_id] %>]">
              <div class="appt-time"><%= data[:datetime].in_time_zone(@school.timezone).strftime('%l:%M %p') %></div>
            </label>
          </div>
        <% end %>
      <% end %>
    </div>
  </li>
<% end %>

<!-- The empty div below is necessary to hold the regular_appt modal that is dynamically generated via Foundation's Reveal modal -->
<div id="regularApptTimesModal" class="reveal-modal" data-reveal aria-labelledby="modalTitle" aria-hidden="true" role="dialog">
</div>

<script>
window.onload = function start() { 
  // Performs 3 tasks onload
  //
  // 1. Addes EventListener to appt time checkboxes
  // 2. Reselects appt times selected by current user during session (in case of page refresh, backwards navigation)
  // 3. Disables reserved times due to existing bookings or tutor's booking buffer

  // 1. Adds Event Listener to all Appt Time Checkboxes
  var apptTimeCheckboxes = document.getElementsByClassName('appt-time-checkbox');
  for(var i=0; i < apptTimeCheckboxes.length; i++) {
    element = apptTimeCheckboxes[i];
    apptTimeCheckboxes[i].addEventListener('change', saveApptTimeAndMarkPills(element));
  }

  // 2. Reselects appt times selected by current user during session  (in case of page refresh)
  if (gon.selected_appt_ids != null){
    var selectedApptIds = gon.selected_appt_ids
    var arrayLength = selectedApptIds.length;
    for (var i = 0; i < arrayLength; i++) {
      var checkbox = document.getElementById(selectedApptIds[i]);
      if(checkbox != null) {
        checkbox.checked = true;
        checkbox.onchange();
      }
    }
  }

  // 3. Disables checkboxes and modal links of reserved times due to existing bookings or tutor's booking buffer
  var reservedAppts = document.getElementsByClassName('reserved')
  if (reservedAppts.length > 0) {
    for (var i = 0; i < reservedAppts.length; i++) {
      // disable reserved time
      var checkbox = reservedAppts[i];
      checkbox.dataset.reserved = true;
      checkbox.disabled = true;
      // disable time 30 mins before (if it exists)
      var checkboxBefore = document.getElementById(parseInt(checkbox.id) - 1);
      if (checkboxBefore != null) {
        checkboxBefore.dataset.reserved = true;
        checkboxBefore.disabled = true;
        // checkboxBefore.classList.add('reserved-neighbor')
      }
      // disable time 30 mins after (if it exists)
      var checkboxAfter = document.getElementById(parseInt(checkbox.id) + 1)
      if (checkboxAfter != null) {
        checkboxAfter.dataset.reserved = true;
        checkboxAfter.disabled = true;
        // checkboxAfter.classList.add('reserved-neighbor')
      }
    }
  }
}

function saveApptTimeAndMarkPills(element) {
  return function(){
    var selected = parseInt(element.id);
    var appt_times = element.value

    // adds or removes appt_time based on selection/de-selection, if it's being added also launches modal prompting regular sessions
    if(element.checked) {
      $.post('appt_time', {checkbox_id: selected, appt_times: appt_times, checkbox: 'selected'});
      $('#regularApptTimesModal').foundation('reveal', 'open', '/tutors/1/regular_times');
    }
    else {
      $.post('appt_time', {checkbox_id: selected, appt_times: appt_times, checkbox: 'deselected'});
    }

    var TwoBefore = document.getElementById(selected - 2);
    var Before = document.getElementById(selected - 1);
    var After = document.getElementById(selected + 1);
    var TwoAfter = document.getElementById(selected + 2);

    // console.log('Reserved Data');
    // console.log('Before: ' + Before.dataset.reserved );
    // console.log('After: ' + After.dataset.reserved );

    // function isReserved(element) {
    //   $(element).hasClass('reserved') || $(element).hasClass('reserved-neighbor');
    // }

    if (element.checked) { // When a time is SELECTED
      if (Before != null) {
        Before.disabled = true;
      }
      if (After != null) {
        After.disabled = true;
        After.classList.add("second-half-of-appt");
      }
    } else { // When a time is DE-SELECTED
      // Before is the time pill immediately (i.e. 30 mins.) before...
      if ((Before != null) &&  (Before.dataset.reserved != 'true')) {
        if (TwoBefore == null) { // if TwoBefore does not exist, should turn from gray to empty (take away disabled)
          Before.disabled = false;
        } else if (TwoBefore.checked == true) { // if 2before is selected, should do nothing (stay green and disabled)
          // do nothing
        } else {
          Before.disabled = false;
        }
      }
      // After is the time pill immediately (i.e. 30 mins.) after...
      if (After != null) {
        if (After.dataset.reserved != 'true') {
          if(TwoAfter == null) { // if TwoAfter does not exist, should turn from green to empty (take away disabled & second-half of appt)
            After.disabled = false;
            After.classList.remove('second-half-of-appt');
          } else if (TwoAfter.checked == true) { // if TwoAfter is selected, should turn from green to gray
            After.disabled = true;
            After.classList.remove('second-half-of-appt')
          } else { // if TwoAfter is not selected, should change from green to empty
            After.disabled = false;
            After.classList.remove('second-half-of-appt');
          }
        } else { // if After is reserved, but not selected
          After.disabled = true;
          After.classList.remove('second-half-of-appt');
        }
      }
    }
  };
}
</script>