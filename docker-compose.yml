# Docker-compose is useful for the development of your application. This automatically spins up
# a container based off the Dockerfile in the working dir and links it to a postgres instance.
# Modify as necessary to suit your needs
  # image: jaicob/web-app
# Followed tips in this tutorial to add Redis and Sidekiq: http://allenan.com/docker-rails-dev-environment-for-osx/

db:
  image: postgres:latest
  ports:
    - "5432:5432"

redis:
  image: redis
  ports: 
    - "6379:6379"

web:
  build: .
  command: ./start_app.sh
  volumes:
    - .:/home/rails/my-app
  ports:
    - "3000:3000"
  links:
    - db
    - redis
  environment:
    - RACK_ENV=development
    - RAILS_ENV=development



# Regular command                |  Docker-compose command -p 3000 -b '0.0.0.0'
#---------------------------------------------------------------------------------------
# bundle install                 |  docker-compose run web bundle install
# rails s                        |  docker-compose run web rails s
# rspec spec/path/to/spec.rb     |  docker-compose run web rspec spec/path/to/spec.rb
# RAILS_ENV=test rake db:create  |  docker-compose run -e RAILS_ENV=test web rake db:create
# tail -f log/development.log    |  docker-compose run web tail -f log/development.log

# LINKS

# webapp_db_1
# []

# webapp_web_1
# [
# /webapp_redis_1:/webapp_web_1/webapp_redis_1 
# /webapp_db_1:/webapp_web_1/db 
# /webapp_db_1:/webapp_web_1/db_1 
# /webapp_redis_1:/webapp_web_1/redis 
# /webapp_redis_1:/webapp_web_1/redis_1 
# /webapp_db_1:/webapp_web_1/webapp_db_1
# ]

# webapp_sidekiq_1
# [
# /webapp_db_1:/webapp_sidekiq_1/db_1 
# /webapp_db_1:/webapp_sidekiq_1/webapp_db_1 
# /webapp_db_1:/webapp_sidekiq_1/db
#
# /webapp_redis_1:/webapp_sidekiq_1/redis 
# /webapp_redis_1:/webapp_sidekiq_1/redis_1 
# /webapp_redis_1:/webapp_sidekiq_1/webapp_redis_1 
# ]

# webapp_redis_1
# []